'''
Description: grapes_io.py read GRAPES model variables in netCDF4 format, which is generated by transf2nc.py.
This module can read in derived variables xarray dataset, as defined in derived_vars.py.
Author: Hejun Xie
Date: 2020-11-01 10:37:12
LastEditors: Hejun Xie
LastEditTime: 2020-11-02 10:40:15
'''

# Global import 
import xarray as xr
import numpy as np
from datetime import datetime

# Local import 
from .derived_vars import GRAPESDerivedVar

def get_grapes_variables(data_file_list, varnames_list, ex_datetime):
    '''
    Params:
        data_file_list: A group of filename containing the datetime to be extracted.
        varname_list: A group of variable names we want to extract.
        ex_datetime: The datetime of the variable we want to extract.
    Returns:
        An xarray dataset containing all the variables in varname_list,
        With coordinates as geopotential height, latitude, longitude.
    '''

    def ___convert_to_datetime(d):
        '''
        Convert from np.datetime64 to datetime object, to work around with this annoying issue
        with datetime format conversion.
        '''
        return datetime.strptime(np.datetime_as_string(d, unit='s'), '%Y-%m-%dT%H:%M:%S')

    for data_file in data_file_list:
        with xr.open_dataset(data_file) as ds:
            
            times_npdt64 = ds.data_vars['times'].data[:]
            times_dt = [___convert_to_datetime(time_npdt64) for time_npdt64 in times_npdt64]

            if ex_datetime in times_dt:
                found_file = data_file
                found_time_idx = times_dt.index(ex_datetime)
                print('Successfully found queried time in file:{}, time_index={}'.format(found_file, found_time_idx))
                break
    
    if 'found_file' not in locals().keys():
        raise ValueError("Queried time not available in this set of data files")

    return _get_grapes_variables(found_file, varnames_list, found_time_idx)

def _get_grapes_variables(data_file, varname_list, time_idx):
    '''
    Params:
        data_file: A filename containing the queried data.
        varname_list: A group of variable names we want to extract.
        time_idx: The index of queried time in the datafile.
    Returns:
        An xarray dataset containing all the variables in varname_list,
        With coordinates as geopotential height, latitude, longitude.
    '''
    
    with xr.open_dataset(data_file) as ds:

        # 1. Get regular coords and raw_varnames to generate the DerivedVarWorkStation
        regular_coords = dict()
        regular_coords['latitude'] = ds.data_vars['latitudes']
        regular_coords['longitude'] = ds.data_vars['longitudes']
        regular_coords['level'] = ds.data_vars['levels']

        coords = ['times', 'levels', 'levels_uv', 'levels_pi', 'latitudes', 'longitudes']
        raw_varnames = list(ds.data_vars.keys())
        for coord in coords:
            if coord in raw_varnames:
                raw_varnames.remove(coord)

        # 2.1 get the derived vars
        dv = GRAPESDerivedVar(ds, regular_coords, raw_varnames, time_idx)
        prepare_ds = dict()
        for varname in varname_list:
            prepare_ds[varname] = dv.get_var(varname)

        # 2.2 get the coords
        gh = dv.get_var('zz') 
        dv.close()

        # 3. make the xarray data set
        output_ds = xr.Dataset(prepare_ds)
        output_ds.coords['z-levels'] = (("level", "latitude", "longitude"), gh.data)
        output_ds.coords['topograph'] = (("latitude", "longitude"), gh.isel(level=0).data)

        print(output_ds)
        exit()

    return output_ds
